package com.company.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PreparedStatementSpy extends StatementSpy implements PreparedStatement {

	protected Map<Integer, String> map;
	protected PreparedStatement realPreparedStatement;
	protected String sql;

	public PreparedStatementSpy(final PreparedStatement realPreparedStatement, final String sql) {
		super(realPreparedStatement);
		this.realPreparedStatement = realPreparedStatement;
		this.sql = sql;
		map = Collections.synchronizedMap(new HashMap<Integer, String>());
	}

	@Override
	public void addBatch() throws SQLException {
		realPreparedStatement.addBatch();
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		realPreparedStatement.addBatch(sql);
	}

	protected void argTraceSet(final int i, final String typeHelper, final Object arg) {
		final String tracedArg = arg == null ? "NULL" : arg.toString();
		// tracedArg = rdbmsSpecifics.formatParameterObject(arg);
		map.put(i, tracedArg);
		//map.put(i, typeHelper + tracedArg);
	}

	@Override
	public void cancel() throws SQLException {
		realPreparedStatement.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		realPreparedStatement.clearBatch();
	}

	@Override
	public void clearParameters() throws SQLException {
		realPreparedStatement.clearParameters();
	}

	@Override
	public void clearWarnings() throws SQLException {
		realPreparedStatement.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		realPreparedStatement.close();
	}

	protected String dumpedSql() {
		final Pattern pattern = Pattern.compile("\\?");
		final Matcher matcher = pattern.matcher(sql);
		final StringBuffer sb = new StringBuffer();
		for (int i = 0; matcher.find(); i++) {
			matcher.appendReplacement(sb, map.get(i + 1));
		}
		matcher.appendTail(sb);
		return sb.toString();
	}

	@Override
	public boolean execute() throws SQLException {
		return realPreparedStatement.execute();
	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		return realPreparedStatement.execute(sql);
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		return realPreparedStatement.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		return realPreparedStatement.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(final String sql, final String[] columnNames) throws SQLException {
		return realPreparedStatement.execute(sql, columnNames);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return realPreparedStatement.executeBatch();
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		final ResultSet executeQuery = realPreparedStatement.executeQuery();
		return executeQuery;
	}

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		final ResultSet executeQuery = realPreparedStatement.executeQuery(sql);
		return executeQuery;
	}

	@Override
	public int executeUpdate() throws SQLException {
		return realPreparedStatement.executeUpdate();
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		return realPreparedStatement.executeUpdate(sql);
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		return realPreparedStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		return realPreparedStatement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		return realPreparedStatement.executeUpdate(sql, columnNames);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return realPreparedStatement.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return realPreparedStatement.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return realPreparedStatement.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		final ResultSet generatedKeys = realPreparedStatement.getGeneratedKeys();
		return generatedKeys;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return realPreparedStatement.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return realPreparedStatement.getMaxRows();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return realPreparedStatement.getMetaData();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return realPreparedStatement.getMoreResults();
	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		return realPreparedStatement.getMoreResults(current);
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return realPreparedStatement.getParameterMetaData();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return realPreparedStatement.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		final ResultSet resultSet = realPreparedStatement.getResultSet();
		return resultSet;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return realPreparedStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return realPreparedStatement.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return realPreparedStatement.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return realPreparedStatement.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return realPreparedStatement.getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return realPreparedStatement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return realPreparedStatement.isPoolable();
	}

	@Override
	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
		return realPreparedStatement.isWrapperFor(iface);
	}

	@Override
	public void setArray(final int parameterIndex, final Array x) throws SQLException {
		realPreparedStatement.setArray(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x) throws SQLException {
		realPreparedStatement.setAsciiStream(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		realPreparedStatement.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		realPreparedStatement.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setBigDecimal(final int parameterIndex, final BigDecimal x) throws SQLException {
		realPreparedStatement.setBigDecimal(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x) throws SQLException {
		realPreparedStatement.setBinaryStream(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		realPreparedStatement.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		realPreparedStatement.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setBlob(final int parameterIndex, final Blob x) throws SQLException {
		realPreparedStatement.setBlob(parameterIndex, x);
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream) throws SQLException {
		realPreparedStatement.setBlob(parameterIndex, inputStream);
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
		realPreparedStatement.setBlob(parameterIndex, inputStream, length);
	}

	@Override
	public void setBoolean(final int parameterIndex, final boolean x) throws SQLException {
		realPreparedStatement.setBoolean(parameterIndex, x);
	}

	@Override
	public void setByte(final int parameterIndex, final byte x) throws SQLException {
		realPreparedStatement.setByte(parameterIndex, x);
	}

	@Override
	public void setBytes(final int parameterIndex, final byte[] x) throws SQLException {
		realPreparedStatement.setBytes(parameterIndex, x);
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
		realPreparedStatement.setCharacterStream(parameterIndex, reader);
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final int length) throws SQLException {
		realPreparedStatement.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		realPreparedStatement.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setClob(final int parameterIndex, final Clob x) throws SQLException {
		realPreparedStatement.setClob(parameterIndex, x);
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader) throws SQLException {
		realPreparedStatement.setClob(parameterIndex, reader);
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		realPreparedStatement.setClob(parameterIndex, reader, length);
	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		realPreparedStatement.setCursorName(name);
	}

	@Override
	public void setDate(final int parameterIndex, final Date x) throws SQLException {
		realPreparedStatement.setDate(parameterIndex, x);
	}

	@Override
	public void setDate(final int parameterIndex, final Date x, final Calendar cal) throws SQLException {
		realPreparedStatement.setDate(parameterIndex, x, cal);
	}

	@Override
	public void setDouble(final int parameterIndex, final double x) throws SQLException {
		realPreparedStatement.setDouble(parameterIndex, x);
	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		realPreparedStatement.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		realPreparedStatement.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		realPreparedStatement.setFetchSize(rows);
	}

	@Override
	public void setFloat(final int parameterIndex, final float x) throws SQLException {
		realPreparedStatement.setFloat(parameterIndex, x);
	}

	@Override
	public void setInt(final int parameterIndex, final int x) throws SQLException {
		realPreparedStatement.setInt(parameterIndex, x);
	}

	@Override
	public void setLong(final int parameterIndex, final long x) throws SQLException {
		realPreparedStatement.setLong(parameterIndex, x);
	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		realPreparedStatement.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		realPreparedStatement.setMaxRows(max);
	}

	@Override
	public void setNCharacterStream(final int parameterIndex, final Reader value) throws SQLException {
		realPreparedStatement.setNCharacterStream(parameterIndex, value);
	}

	@Override
	public void setNCharacterStream(final int parameterIndex, final Reader value, final long length) throws SQLException {
		realPreparedStatement.setNCharacterStream(parameterIndex, value, length);
	}

	@Override
	public void setNClob(final int parameterIndex, final NClob value) throws SQLException {
		realPreparedStatement.setNClob(parameterIndex, value);
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader) throws SQLException {
		realPreparedStatement.setNClob(parameterIndex, reader);
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		realPreparedStatement.setNClob(parameterIndex, reader, length);
	}

	@Override
	public void setNString(final int parameterIndex, final String value) throws SQLException {
		realPreparedStatement.setNString(parameterIndex, value);
	}

	@Override
	public void setNull(final int parameterIndex, final int sqlType) throws SQLException {
		argTraceSet(parameterIndex, null, null);
		realPreparedStatement.setNull(parameterIndex, sqlType);
	}

	@Override
	public void setNull(final int parameterIndex, final int sqlType, final String typeName) throws SQLException {
		realPreparedStatement.setNull(parameterIndex, sqlType, typeName);
	}

	@Override
	public void setObject(final int parameterIndex, final Object x) throws SQLException {
		realPreparedStatement.setObject(parameterIndex, x);
	}

	@Override
	public void setObject(final int parameterIndex, final Object x, final int targetSqlType) throws SQLException {
		realPreparedStatement.setObject(parameterIndex, x, targetSqlType);
	}

	@Override
	public void setObject(final int parameterIndex, final Object x, final int targetSqlType, final int scaleOrLength) throws SQLException {
		realPreparedStatement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
	}

	@Override
	public void setPoolable(final boolean poolable) throws SQLException {
		realPreparedStatement.setPoolable(poolable);
	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		realPreparedStatement.setQueryTimeout(seconds);
	}

	@Override
	public void setRef(final int parameterIndex, final Ref x) throws SQLException {
		realPreparedStatement.setRef(parameterIndex, x);
	}

	@Override
	public void setRowId(final int parameterIndex, final RowId x) throws SQLException {
		realPreparedStatement.setRowId(parameterIndex, x);
	}

	@Override
	public void setShort(final int parameterIndex, final short x) throws SQLException {
		realPreparedStatement.setShort(parameterIndex, x);
	}

	@Override
	public void setSQLXML(final int parameterIndex, final SQLXML xmlObject) throws SQLException {
		realPreparedStatement.setSQLXML(parameterIndex, xmlObject);
	}

	@Override
	public void setString(final int parameterIndex, final String x) throws SQLException {
		realPreparedStatement.setString(parameterIndex, x);
	}

	@Override
	public void setTime(final int parameterIndex, final Time x) throws SQLException {
		realPreparedStatement.setTime(parameterIndex, x);
	}

	@Override
	public void setTime(final int parameterIndex, final Time x, final Calendar cal) throws SQLException {
		realPreparedStatement.setTime(parameterIndex, x, cal);
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x) throws SQLException {
		realPreparedStatement.setTimestamp(parameterIndex, x);
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x, final Calendar cal) throws SQLException {
		realPreparedStatement.setTimestamp(parameterIndex, x, cal);
	}

	@Override
	public void setUnicodeStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		realPreparedStatement.setUnicodeStream(parameterIndex, x, length);
	}

	@Override
	public void setURL(final int parameterIndex, final URL x) throws SQLException {
		realPreparedStatement.setURL(parameterIndex, x);
	}

	@Override
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		return realPreparedStatement.unwrap(iface);
	}

}
